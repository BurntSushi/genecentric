#!/usr/bin/env python2.7

import bpm.cmdargs.goenrich # Which command line arguments do we want?
from bpm import bpmreader, conf, emap, faread, parallel

parallel.costs['load_genes'] = 10
parallel.print_progress()

emap.load_genes() # Creates global variables emap.genes and emap.gis
bpms = bpmreader.read(conf.bpm)

# Calculate the total number of steps so we can measure progress
parallel.steps = (len(bpms) * 2) + sum(parallel.costs.itervalues())

def modules():
    for i, b in enumerate(bpms):
        for modnum, mod in enumerate(b):
            yield i, modnum, mod

def enrich((bpmi, modi, genes)):
    goterms = faread.functionate(genes)

    parallel.inc_counter()
    parallel.print_progress()
    return bpmi, modi, genes, goterms

enrichment = parallel.pmap(enrich, modules())
parallel.print_progress(final=True)

for bpmi, modi, genes, goterms in sorted(enrichment):
    print '> BPM%d/Module%d' % (bpmi, modi)
    print '\t'.join(genes)
    for accession, goterm in goterms.iteritems():
        frac = '%d/%d' % (goterm['num_with'], goterm['num_query'])
        print '%s\t%f\t%s\t%s' % (accession, goterm['p'], frac, goterm['name'])

