#!/usr/bin/env python2

import argparse
import csv

import geneids

import bpm.bpmreader

parser = argparse.ArgumentParser(
    description='Mark onco genes in a yeast BPM file.',
    formatter_class=argparse.ArgumentDefaultsHelpFormatter)
aa = parser.add_argument
aa('bpm', type=str,
   metavar='INPUT_BPM_FILE',
   help='Location of the input BPM file.')
aa('oncogenes', type=str,
   metavar='INPUT_ONCO_GENES',
   help='Location of the othologous yeast gene list file.')
aa('orthologs', type=str,
   metavar='INPUT_YEAST_HUMAN_ORTHOLOGS',
   help='Location of the orthologous mapping from EMAP genes used to generate '
        'the input BPM file to human genes.')
aa('obpm', type=str,
   metavar='OUTPUT_BPM_FILE',
   help='Location of the output BPM file.')
aa('--nice', action='store_true',
   help='When set, locus (sgd_systematic) names will be translated to product '
        'names if possible.')
conf = parser.parse_args()

# Put all of the oncogenes into a set.
oncogenes = set()
for gene in open(conf.oncogenes):
    oncogenes.add(gene.strip().upper())

# Construct set of yeast genes from the INPUT_YEAST_HUMAN_ORTHOLOGS
# mapping file. The idea here is that if there's a yeast gene in that file,
# then it has a human ortholog.
humanOrths = set()
for row in csv.reader(open(conf.orthologs), delimiter='\t'):
    _, systematic = row[0].split(':$:')
    humanOrths.add(systematic)

def translate(gene):
    newgene = gene
    if conf.nice:
        newgene = geneids.locus_to_product(newgene)
    if gene in oncogenes:
        newgene = '*%s*' % newgene
    elif gene in humanOrths:
        newgene = '+%s+' % newgene
    return newgene

out = open(conf.obpm, 'w+')
for i, (mod1, mod2) in enumerate(bpm.bpmreader.read(conf.bpm)):
    # Check each gene individually. If it's in the oncogenes set, mark it.
    # Also, if we're being nice, translate the name.
    newmod1, newmod2 = map(translate, mod1), map(translate, mod2)

    print >> out, 'BPM%d/Module1\t%s' % (i, '\t'.join(newmod1))
    print >> out, 'BPM%d/Module2\t%s' % (i, '\t'.join(newmod2))

